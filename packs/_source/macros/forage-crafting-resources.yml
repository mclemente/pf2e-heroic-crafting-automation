name: Forage Crafting Resources
type: script
author: BRial3lkTUItF0fP
img: icons/commodities/flowers/flower-green.webp
scope: global
command: >-
  // Editable values (or at least, ones I suggest):


  const skillName = "survival";

  const rawTraits = ["downtime"];

  const actionName = "Forage Crafting Resources";


  // End of editable values


  if (!token) {
      ui.notifications.warn("Please select a token!");
      return;
  }


  const dialogForm = `<form>
      <body>
          <section>
              <h1>Forage Crafting Materials</h1>
          </section>
      </body>
      <div class="form-group">
          <label for="taskLevel">Task Level:</label>
          <input type="number" name="taskLevel" id="taskLevel" value=0 min=0 max=20>
      </div>
      <div class="form-group">
          <label for="DC">DC:</label>
          <input type="number" name="DC" id="DC" value=0 min=0>
      </div>
  </form>`;


  const dialogResults = await Dialog.wait({
      title: "Forage Crafting Resources",
      content: dialogForm,
      buttons: {
          ok: {
              label: "Forage",
              icon: "<i class='fa-solid fa-wheat-awn'></i>",
              callback: (html) => {
                  return {
                      DC: Number($(html).find("#DC")[0].value) || 0,
                      level: Number($(html).find("#taskLevel")[0].value) || 0
                  };
              }
          },
          cancel: {
              label: "Cancel",
              icon: "<i class='fa-solid fa-ban'></i>",
          }
      },
      default: "ok",
  }, { width: 350 });


  if (dialogResults === "cancel") return;


  const modifiers = [];

  const traits = [];

  const extraRollNotes = [];


  const statistic = actor.getStatistic(skillName);

  const harvestSkillCheck = statistic.extend({
      check: {
          label: `${actionName}`
      },
      rank: statistic.rank,
      rollOptions: [`action:forage`],
      slug: "action-forage-harvesting-resources"
  });

  const actorRollOptions = actor.getRollOptions();


  const baseGatheredIncome =
  game.pf2e.Coins.fromString(game.pf2eHeroicCrafting.HeroicCraftingGatheredIncome[dialogResults.level]);

  let gatheredIncome = baseGatheredIncome;


  {
      // Default Notes

      extraRollNotes.push({
          "outcome": ["success", "criticalSuccess"],
          "text": "<p><strong>Success</strong> Add the amount listed on Table 2: Gathered Income for the location's level to your Material Trove each day. If you are a master in Survival, instead add twice as much.</p>"
      });
      extraRollNotes.push({
          "outcome": ["failure", "criticalFailure"],
          "text": "<p><strong>Failure</strong> You find no materials.</p>"
      });
  }

  {
      // Converting raw traits into actual traits

      const actionTraits = CONFIG.PF2E.actionTraits;
      const traitDescriptions = CONFIG.PF2E.traitsDescriptions;

      rawTraits
          .map((trait) => ({
              description: traitDescriptions[trait],
              name: trait,
              label: actionTraits[trait] ?? trait,
          }))
          .forEach(traitObject => traits.push(traitObject));
  }


  {
      // If master in survival, double the crafting resources got

      if (harvestSkillCheck.rank >= 3) {
          gatheredIncome = gatheredIncome.add(baseGatheredIncome);
      }
  }

  {
      // Vigilant Forager
      if (actorRollOptions.includes("feat:vigilant-forager")) {
          modifiers.push(
              new game.pf2e.Modifier({
                  slug: "vigilant-forager-penalty",
                  label: "Vigilant Forager (after 8 hours or less)",
                  modifier: -5,
                  predicate: ["8-hours-or-less-of-exploration"],
              })
          );
      }
  }


  harvestSkillCheck.roll({
      extraRollNotes,
      dc: dialogResults.DC === 0 ? null : {
          value: dialogResults.DC
      },
      traits,
      createMessage: false,
      [`callback`]: async (roll, outcome, message, event) => {
          if (message instanceof ChatMessage) {
              let extraFlavour = ``;

              // Practiced Forager
              if (outcome === "criticalSuccess" && actorRollOptions.includes("feat:practiced-forager")) {
                  gatheredIncome = gatheredIncome.add(baseGatheredIncome);
              }

              // General Summary
              if (outcome === "success" || outcome === "criticalSuccess") {
                  extraFlavour = extraFlavour.concat(`<hr> <p><strong>Foundry Note</strong> You find <strong>${gatheredIncome.toString()}</strong> worth of materials. You can use the @UUID[Compendium.pf2e-heroic-crafting-automation.heroic-crafting-automation-macros.Macro.wtYkY4Kay4dZ3HT6]{Refill Material Troves} macro to add this value to your Material Troves.</p>`);
              }

              message.updateSource({ flavor: message.flavor + extraFlavour });
              ChatMessage.create(message.toObject());
          }
      }
  });
flags: {}
_id: ygPS9KQ4kgZEwpFY
sort: 0
ownership:
  default: 0
_stats:
  coreVersion: '13.348'
  systemId: null
  systemVersion: null
  createdTime: null
  modifiedTime: null
  lastModifiedBy: null
  duplicateSource: null
  exportSource: null
folder: null
_key: '!macros!ygPS9KQ4kgZEwpFY'
